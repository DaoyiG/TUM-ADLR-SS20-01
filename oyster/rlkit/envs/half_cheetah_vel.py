import numpy as np

from . import register_env
from .half_cheetah import HalfCheetahEnv

@register_env('cheetah-vel')
class HalfCheetahVelEnv(HalfCheetahEnv):
    """Half-cheetah environment with target velocity, as described in [1]. The
    code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/half_cheetah_env_rand.py

    The half-cheetah follows the dynamics from MuJoCo [2], and receives at each
    time step a reward composed of a control cost and a penalty equal to the
    difference between its current velocity and the target velocity. The tasks
    are generated by sampling the target velocities from the uniform
    distribution on [0, 2].

    [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic
        Meta-Learning for Fast Adaptation of Deep Networks", 2017
        (https://arxiv.org/abs/1703.03400)
    [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """
    def __init__(self, task={}, n_tasks=2, randomize_tasks=True, observation_noise=0, action_noise=0):
        self._task = task
        self.tasks = self.sample_tasks(n_tasks)
        self._goal_vel = self.tasks[0].get('velocity', 0.0)
        self._goal = self._goal_vel
        self._observation_noise = observation_noise
        self._action_noise = action_noise
        super(HalfCheetahVelEnv, self).__init__()

    # TODO: step function with reward
    # TODO: write _get_obs to get observations

    # reference code from pearl
    # def step(self, action):
    #     xposbefore = self.sim.data.qpos[0]
    #     self.do_simulation(action, self.frame_skip)
    #     xposafter = self.sim.data.qpos[0]
    #
    #     forward_vel = (xposafter - xposbefore) / self.dt
    #     forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
    #     ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))
    #
    #     observation = self._get_obs()
    #     reward = forward_reward - ctrl_cost
    #     done = False
    #     infos = dict(reward_forward=forward_reward,
    #                  reward_ctrl=-ctrl_cost, task=self._task)
    #     return (observation, reward, done, infos)
    def step(self, action):
        # apply action noise
        if self._action_noise >1e-8:
            noise = self._action_noise * np.random.randn(self.action_space.shape[0])
            action += noise

        # get xposbefore
        xposbefore = self.get_pose_xyz[0]
        # Use original step function
        observation, reward, done, _ = super(HalfCheetahVelEnv, self).step(action)
        # apply observation noise
        if self._observation_noise >1e-8:
            noise = self._observation_noise * np.random.randn(self.observation_space.shape[0])
            observation += noise
        # get xpos after
        xposafter = self.get_pose_xyz[0]

        # TODO: how to return new dimension if use _get_obs()

        # observation = self._get_obs()
        forward_vel = (xposafter - xposbefore) / (1./240.)  # one step in bullet is 1/240 s #TODO: double check
        forward_reward = -1.0 * abs(forward_vel - self._goal_vel)
        ctrl_cost = 0.5 * 1e-1 * np.sum(np.square(action))

        reward = forward_reward - ctrl_cost
        done = False
        infos = dict(reward_forward=forward_reward, reward_ctrl=-ctrl_cost, task=self._task)
        return (observation, reward, done, infos)


    def sample_tasks(self, num_tasks):
        np.random.seed(1337)
        velocities = np.random.uniform(0.0, 3.0, size=(num_tasks,))
        tasks = [{'velocity': velocity} for velocity in velocities]
        return tasks

    def get_all_task_idx(self):
        return range(len(self.tasks))

    def reset_task(self, idx):
        self._task = self.tasks[idx]
        self._goal_vel = self._task['velocity']
        self._goal = self._goal_vel
        self.reset()
